<div class="bg-white rounded-xl shadow-sm border border-gray-200 h-full flex flex-col">

  <!-- Chat Header (keep same) -->
  <div class="bg-gradient-to-r from-blue-50 to-indigo-50 px-6 py-4 border-b border-gray-200">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <%= link_to conversations_path, class: "text-gray-400 hover:text-gray-600 transition duration-150 lg:hidden" do %>
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
        <% end %>

        <div class="flex items-center space-x-3">
          <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold">
            <%= @other_user.name[0].upcase %>
          </div>
          <div>
            <h2 class="text-xl font-semibold text-gray-900"><%= @other_user.name %></h2>
            <p class="text-green-600 text-sm flex items-center">
              <span class="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
              Online
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Messages Container -->
  <div id="messages" class="flex-1 overflow-y-auto p-6 bg-gray-50 space-y-4" data-current-user-id="<%= current_user.id %>">
    <% @messages.each do |message| %>
      <div data-controller="message"
           data-message-current-user-id-value="<%= current_user.id %>"
           data-user-id="<%= message.user_id %>">
        <%= render "messages/message", message: message %>
      </div>
    <% end %>
  </div>

  <!-- Message Input -->
  <div class="border-t border-gray-200 p-6 bg-white">
    <%= form_with model: [@conversation, @message], local: false, id: "new_message" do |form| %>
      <div class="flex space-x-4">
        <div class="flex-1">
          <%= form.text_field :content,
                              placeholder: "Type your message...",
                              class: "w-full px-4 py-3 border border-gray-300 rounded-full focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition duration-150",
                              autocomplete: "off" %>
        </div>

        <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-full transition duration-150 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
          </svg>
        </button>
      </div>
    <% end %>
  </div>
</div>

<%= turbo_stream_from "user_#{current_user.id}_conversation_#{@conversation.id}" %>


<script>
    // Auto-scroll to bottom of messages
    document.addEventListener('turbo:load', function() {
        const messagesContainer = document.getElementById('messages');
        if (messagesContainer) {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Focus on message input
        const messageInput = document.querySelector('input[placeholder="Type your message..."]');
        if (messageInput) {
            messageInput.focus();
        }
    });

    // Re-initialize message styling for Turbo Stream updates
    document.addEventListener('turbo:before-stream-render', function(event) {
        setTimeout(() => {
            const messagesContainer = document.getElementById('messages');
            if (messagesContainer) {
                const currentUserId = messagesContainer.dataset.currentUserId;
                const messageElements = messagesContainer.querySelectorAll('[data-controller="message"]');

                messageElements.forEach(element => {
                    const messageUserId = element.dataset.userId;
                    const isCurrentUser = parseInt(messageUserId) === parseInt(currentUserId);

                    const messageDirection = element.querySelector('[data-message-direction]');
                    const messageBubble = element.querySelector('[data-message-bubble]');
                    const timestamp = element.querySelector('[data-timestamp]');
                    const senderName = element.querySelector('[data-sender-name]');

                    // Clear any existing classes
                    messageDirection.className = 'flex';
                    messageBubble.className = 'rounded-2xl px-4 py-2 shadow-sm';
                    if (timestamp) timestamp.className = 'text-xs mt-1 text-right';
                    if (senderName) senderName.style.display = 'block';

                    if (isCurrentUser) {
                        messageDirection.classList.add('justify-end');
                        messageBubble.classList.add('bg-blue-600', 'text-white');
                        timestamp.classList.add('text-blue-100');
                        if (senderName) senderName.style.display = 'none';
                    } else {
                        messageDirection.classList.add('justify-start');
                        messageBubble.classList.add('bg-white', 'text-gray-800', 'border', 'border-gray-200');
                        timestamp.classList.add('text-gray-400');
                    }
                });

                // Auto-scroll after new message
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        }, 100);
    });
</script>